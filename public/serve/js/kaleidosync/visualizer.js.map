{"version":3,"sources":["kaleidosync/visualizer.js"],"names":["Visualizer","demo","interval","audio","document","querySelector","active","initialized","toast","Toast","pinging","pingInterval","events","beforeInit","afterInit","beforeStart","afterStart","beforeStop","afterStop","getCurrentlyPlaying","then","response","processResponse","catch","err","console","log","nowPlaying","title","currentlyPlaying","item","name","album","artist","artists","artwork","images","url","bind","call","setIntervalHooks","initializeHooks","src","play","canPlayThrough","trackProgress","progress","currentTime","timestamp","window","performance","now","startVisualizer","removeEventListener","addEventListener","removeHooks","updateTrackProgress","notPlaying","stopVisualizer","getData","clearInterval","Promise","all","getTrackFeatures","getTrackAnalysis","responses","trackFeatures","trackAnalysis","delay","startVisualizerDemo","startPing","is_playing","JSON","stringify","setInterval","SpotifyConnect"],"mappings":"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","file":"visualizer.js","sourcesContent":["import SpotifyConnect from './spotify-connect'\nimport Toast from './toast'\n\nclass Visualizer extends SpotifyConnect {\n  constructor(demo, interval) {\n    super(demo, interval)\n    \n    this.audio = document.querySelector('audio')\n    this.active = false\n    this.initialized = false\n    this.toast = new Toast\n    this.pinging = false\n    this.pingInterval = {}\n    this.events = {\n      beforeInit: () => {},\n      afterInit: () => {},\n      beforeStart: () => {},\n      afterStart: () => {},\n      beforeStop: () => {},\n      afterStop: () => {}\n    }\n  }\n\n  initializeVisualizer() {\n    this.getCurrentlyPlaying()\n      .then((response) => this.processResponse(response))\n      .catch((err) => console.log(err))\n  }\n\n  startVisualizer() {  \n    this.toast.nowPlaying({\n      title: this.currentlyPlaying.item.name,\n      album: this.currentlyPlaying.item.album.name,\n      artist: this.currentlyPlaying.item.artists[0].name,\n      artwork: this.currentlyPlaying.item.album.images[0].url\n    })\n\n    if (this.initialized === false) {\n      this.events.beforeInit.bind(this).call()\n      this.initialized = true\n      this.events.afterInit.bind(this).call()\n    }\n\n    this.events.beforeStart.bind(this).call()\n    this.setIntervalHooks()\n    this.initializeHooks()\n    this.active = true\n    this.events.afterStart.bind(this).call()\n  }\n\n  startVisualizerDemo() {\n    this.audio.src = `/data/song.mp3`\n    this.audio.play()\n\n    const canPlayThrough = () => {\n      this.trackProgress = { \n        progress: this.audio.currentTime * 100,\n        timestamp: window.performance.now()\n      }\n      this.startVisualizer()\n      this.audio.removeEventListener('canplaythrough', canPlayThrough)\n    }\n\n    this.audio.addEventListener('canplaythrough', canPlayThrough)\n  }\n\n  stopVisualizer() { \n    this.events.beforeStop.bind(this).call()\n    this.removeHooks()\n    this.updateTrackProgress(0, true) \n    this.active = false\n    this.events.afterStop.bind(this).call()\n  }\n\n  processResponse(response) {\n    if (!response.item) {\n      this.toast.notPlaying()\n\n      if (this.active) {\n        this.stopVisualizer()\n      }\n\n      return\n    }\n\n    const getData = (timestamp) => {\n      clearInterval(this.pingInterval)\n      Promise.all([\n        this.getTrackFeatures(),\n        this.getTrackAnalysis()\n      ]).then((responses) => {\n        this.trackFeatures = responses[0]\n        this.trackAnalysis = responses[1]\n        this.updateTrackProgress(response.delay + (window.performance.now() - timestamp))\n        if (this.demo === true) {\n          this.startVisualizerDemo()\n        } else {\n          this.startVisualizer()\n          this.startPing()\n        }\n      })\n    }\n\n    if (this.active) {\n      if (response.is_playing === false) {\n        this.stopVisualizer()\n        this.toast.notPlaying()\n        if (!this.pinging) { this.startPing() }\n        return\n      }\n\n      if (JSON.stringify(this.currentlyPlaying.item) !== JSON.stringify(response.item)) {\n        this.stopVisualizer()\n        this.currentlyPlaying = response\n        getData(window.performance.now())\n        return\n      }\n    }\n\n    if (!this.active && response.is_playing === false) {\n      this.toast.notPlaying()\n    }\n\n    if (!this.active && response.is_playing === true) {    \n      this.currentlyPlaying = response\n      getData(window.performance.now())\n    } \n\n    if (!this.pinging && !this.demo) {\n      this.startPing()\n    }\n  }\n\n  startPing() {    \n    clearInterval(this.pingInterval)\n    this.pingInterval = setInterval(() => {\n      console.log('Ping...')\n      this.getCurrentlyPlaying()\n        .then((response) => this.processResponse(response))\n        .catch((err) => console.log(err))\n    }, 5000)\n  }\n}\n \nexport default Visualizer "]}