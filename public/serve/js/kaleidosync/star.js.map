{"version":3,"sources":["kaleidosync/star.js"],"names":["PI","Math","ROTATION","Star","props","prop","step","points","ctx","rotation","x","y","beginPath","moveTo","outerRadius","i","cos","sin","lineTo","innerRadius","closePath","fillStyle","color","fill"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,MAAMA,kBAAKC,KAAKD,EAAhB;AACA,MAAME,8BAAWF,KAAG,CAAH,GAAK,CAAtB;;MAEDG,I;AACJ,kBAAYC,KAAZ,EAAmB;AAAA;;AACjB,WAAK,IAAIC,IAAT,IAAiBD,KAAjB,EAAwB;AACtB,aAAKC,IAAL,IAAaD,MAAMC,IAAN,CAAb;AACD;;AAED,WAAKC,IAAL,GAAYN,KAAG,KAAKO,MAApB;AACD;;;;6BAEMH,K,EAAO;AACZ,aAAK,IAAIC,IAAT,IAAiBD,KAAjB,EAAwB;AACtB,eAAKC,IAAL,IAAaD,MAAMC,IAAN,CAAb;AACD;AACF;;;2BAEIG,G,EAAK;AACR,YAAIC,WAAWP,QAAf;AACA,YAAIQ,IAAI,KAAKA,CAAb;AACA,YAAIC,IAAI,KAAKA,CAAb;;AAEAH,YAAII,SAAJ,CAAc,KAAKL,MAAnB;AACAC,YAAIK,MAAJ,CAAW,KAAKH,CAAhB,EAAmB,KAAKC,CAAL,GAAS,KAAKG,WAAjC;;AAEA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKR,MAAzB,EAAiCQ,GAAjC,EAAsC;AACpCL,cAAI,KAAKA,CAAL,GAAST,KAAKe,GAAL,CAASP,QAAT,IAAqB,KAAKK,WAAvC;AACAH,cAAI,KAAKA,CAAL,GAASV,KAAKgB,GAAL,CAASR,QAAT,IAAqB,KAAKK,WAAvC;AACAN,cAAIU,MAAJ,CAAWR,CAAX,EAAcC,CAAd;AACAF,sBAAY,KAAKH,IAAjB;AACAI,cAAI,KAAKA,CAAL,GAAST,KAAKe,GAAL,CAASP,QAAT,IAAqB,KAAKU,WAAvC;AACAR,cAAI,KAAKA,CAAL,GAASV,KAAKgB,GAAL,CAASR,QAAT,IAAqB,KAAKU,WAAvC;AACAX,cAAIU,MAAJ,CAAWR,CAAX,EAAcC,CAAd;AACAF,sBAAY,KAAKH,IAAjB;AACD;;AAEDE,YAAIU,MAAJ,CAAW,KAAKR,CAAhB,EAAmB,KAAKC,CAAL,GAAS,KAAKG,WAAjC;AACAN,YAAIY,SAAJ;AACAZ,YAAIa,SAAJ,GAAgB,KAAKC,KAArB;AACAd,YAAIe,IAAJ;AACD;;;;;;oBAGYpB,I","file":"star.js","sourcesContent":["export const PI = Math.PI\nexport const ROTATION = PI/2*3\n\nclass Star {\n  constructor(props) {\n    for (var prop in props) {\n      this[prop] = props[prop]\n    } \n\n    this.step = PI/this.points\n  }\n\n  update(props) {\n    for (var prop in props) {\n      this[prop] = props[prop]\n    } \n  }\n\n  draw(ctx) {\n    let rotation = ROTATION\n    let x = this.x\n    let y = this.y\n\n    ctx.beginPath(this.points) \n    ctx.moveTo(this.x, this.y - this.outerRadius)\n\n    for (var i = 0; i < this.points; i++) {\n      x = this.x + Math.cos(rotation) * this.outerRadius\n      y = this.y + Math.sin(rotation) * this.outerRadius\n      ctx.lineTo(x, y)\n      rotation += this.step\n      x = this.x + Math.cos(rotation) * this.innerRadius\n      y = this.y + Math.sin(rotation) * this.innerRadius\n      ctx.lineTo(x, y)\n      rotation += this.step\n    }\n    \n    ctx.lineTo(this.x, this.y - this.outerRadius)\n    ctx.closePath()\n    ctx.fillStyle = this.color\n    ctx.fill()\n  }\n} \n\nexport default Star"]}